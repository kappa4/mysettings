;; add ~/.emacs.d/site-lisp with load-path
(add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp"))

;; psvn
(require 'psvn)
(add-hook 'dired-mode-hook
          '(lambda ()
             (require 'dired-x)
             ;;(define-key dired-mode-map "V" 'cvs-examine)
             (define-key dired-mode-map "V" 'svn-status)
             (turn-on-font-lock)
             ))
(setq svn-status-hide-unmodified t)
(setq process-coding-system-alist
      (cons '("svn" . utf-8) process-coding-system-alist))

;;
;; ruby
;;
(autoload 'inf-ruby-keys "inf-ruby" "Set local key defs for inf-ruby in ruby-mode")
(add-hook 'ruby-mode-hook '(lambda () (inf-ruby-keys)))
(autoload 'rubydb "rubydb3x"
  "run rubydb on program file in buffer *gud-file*.
the directory containing file becomes the initial working directory
and source-file directory for your debugger." t)

;;-----------------------------------------------------------------
;; Rails
;;-----------------------------------------------------------------
(setq load-path (cons (expand-file-name "~/.emacs.d/") load-path))
(defun try-complete-abbrev (old)
       (if (expand-abbrev) t nil))
(setq hippie-expand-try-functions-list
      '(try-complete-abbrev
        try-complete-file-name
        try-expand-dabbrev))
;;(require 'cl)
(require 'rails)

;;-----------------------------------------------------------------
;; ECB
;;-----------------------------------------------------------------
;;(setq load-path (cons (expand-file-name "~/.emacs.d/ecb-2.32") load-path))
;;(load-file "~/.emacs.d/cedet-1.0pre3/common/cedet.el")
;;(setq semantic-load-turn-useful-things-on t)
;; ECB
;;(require 'ecb)
;(setq ecb-tip-of-the-day nil)
;;(setq ecb-windows-width 0.25)

;;(defun ecb-toggle ()
;;  (interactive)
;;  (if ecb-minor-mode
;;      (ecb-deactivate)
;;    (ecb-activate)))
;;(global-set-key [f2] 'ecb-toggle)

;;----------------------------------------------------------------
;; Transparency
;;----------------------------------------------------------------
(modify-all-frames-parameters
 (list (cons 'alpha '(90 70 50 30))))
  (set-frame-parameter (selected-frame)  'alpha  '(85 70))
;  (set-alpha '(85 70))

;;----------------------------------------------------------------
;; Color-theme
;;----------------------------------------------------------------
(require 'color-theme)
(color-theme-initialize)
;;color-theme-initialize(color-theme-whateveryouwant)
(color-theme-clarity)

;;(defun color-theme-face-construct (face frame)
;;  (if (atom face)
;;      (custom-face-attributes-get face frame)
;;    (if (and (consp face) (eq (car face) 'quote))
;;  (custom-face-attributes-get (cadr face) frame)
;;      (custom-face-attributes-get (car face) frame))))

;;(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
;; '(ecb-options-version "2.32")
;; '(ecb-source-path (quote ("/Users/cirius/NAGEKOMI.JP/nagekomi_jp")))
;; '(ecb-tree-indent 2)
;; '(ecb-wget-setup (quote cons)))
;;(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
;; )

;; Disable toolbar
(tool-bar-mode 0)

;; scroll per one row
(setq scroll-conservatively 35
       scroll-margin 0
       scroll-step 1)
(setq comint-scroll-show-maximum-output t)
;; １行づつスクロールする
(setq scroll-conservatively 1)

; Disable beep
(setq ring-bell-function '(lambda ()))

; for work with aqua-skk
;;(setq mac-pass-control-to-system nil)

;;; (put 'set-goal-column 'disabled nil)

;; 動的略語展開をハイライト
(require 'dabbrev-highlight)

;; elscreen
(load "elscreen" "ElScreen" t)
(load "elscreen-dnd" "ElScreen-dnd" t)
;;(require 'elscreen)
;;(load "elscreen-plus" "ElScreen-plus" t)

;; C-x C-b でバッファリストを開く時に、ウィンドウを分割しない
(global-set-key "\C-x\C-b" 'buffer-menu)


;;
;; yank-pop browsing
;;
(autoload 'yank-pop-forward "yank-pop-summary" nil t)
(autoload 'yank-pop-backward "yank-pop-summary" nil t)
(global-set-key "\M-y" 'yank-pop-forward)
(global-set-key "\C-\M-y" 'yank-pop-backward)


;;
;; shell-command completion
;;
(require 'shell-command)
(shell-command-completion-mode)

;;
;; enable escape sequence
;;
(autoload 'ansi-color-for-comint-mode-on "ansi-color"
          "Set `ansi-color-for-comint-mode' to t." t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)


;semantic cache is ~/.semantic
(setq semanticdb-default-save-directory (expand-file-name "~/.semantic"))


;;
;; set shell env
;;
(setenv "LC_CTYPE" "ja_JP.UTF-8")
(setenv "LC_MESSAGES" "ja_JP.UTF-8")

;; TAB幅の設定
(setq-default tab-width 4)

;; タブ文字を使わない
(setq-default indent-tabs-mode nil)
(setq indent-line-function 'indent-relative-maybe)

;; php のタブ数を設定
(add-hook 'php-mode-user-hook
          '(lambda ()
             (setq tab-width 4
                   c-basic-offset 4
                   c-hanging-comment-ender-p nil
                   indent-tabs-mode nil
                   (not
                    (and (string-match "/\\(PEAR\\|pear\\)/" (buffer-file-name))
                         (string-match "\.php$" (buffer-file-name))
                         )
                    )
                   )
             )
;;             (setq tab-width 4)
;;             (setq indent-tabs-mode nil))
          )

;; c のタブ数を設定
(add-hook 'c-mode-common-hook
          '(lambda ()
             (c-set-style "GNU")
             (setq c-basic-offset 4)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Migemo
;;
;;(load "migemo.el")
;;(setq migemo-use-pattern-alist t)
;;(setq migemo-use-frequent-pattern-alist t)
;;(setq migemo-command "cmigemo")
;;(setq migemo-options '("-q" "--emacs" "-i" "\a"))
;;(setq migemo-dictionary "/usr/local/share/migemo/euc-jp/migemo-dict")
;;(setq migemo-user-dictionary nil)
;;(setq migemo-regex-dictionary nil)
;;(require 'kogiku);; find-fileでもmigemoを使う

(put 'narrow-to-region 'disabled nil)


;; backup dir
  (setq make-backup-files t)
  (setq backup-directory-alist
    (cons (cons "\\.*$" (expand-file-name "~/.emacs.d/backup"))
     backup-directory-alist))

(put 'upcase-region 'disabled nil)

;; C-h は backspace がイイ!
;; (keyboard-translate ?\C-h ?\C-?)
(global-set-key "\C-h" 'delete-backward-char)
(global-set-key "\M-?" 'help)

;; セッションの保存
(load "desktop")
(desktop-save-mode t)
;; (desktop-read)

;; ミニバッファ拡張
(require 'mcomplete)
(turn-on-mcomplete-mode)


;;
;; wdired
;;
;; (autoload 'wdired-change-to-wdired-mode "wdired")
;; (add-hook 'dired-load-hook
;;          '(lambda ()
;;              (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)
;;              (define-key dired-mode-map
;;                [menu-bar immediate wdired-change-to-wdired-mode]
;;                '("Edit File Names" . wdired-change-to-wdired-mode))))
(require 'wdired)
(define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)


;; color-moccur
(require 'color-moccur)

;; moccur-edit
(load "moccur-edit")

;;全角スペース、タブ、行末の空白に色を付ける
(defface my-face-b-1 '((t (:background "medium aquamarine"))) nil)
(defface my-face-b-2 '((t (:background "cyan"))) nil)
(defface my-face-u-1 '((t (:foreground "SteelBlue" :underline t))) nil)
(defvar my-face-b-1 'my-face-b-1)
(defvar my-face-b-2 'my-face-b-2)
(defvar my-face-u-1 'my-face-u-1)
(defadvice font-lock-mode (before my-font-lock-mode ())
             (font-lock-add-keywords
                  major-mode
                     '(
                            ("　" 0 my-face-b-1 append)
                            ("\t" 0 my-face-b-2 append)
                            ("[ ]+$" 0 my-face-u-1 append)
           )))
(ad-enable-advice 'font-lock-mode 'before 'my-font-lock-mode)
(ad-activate 'font-lock-mode)
;;(add-hook 'find-file-hooks '(lambda ()
;;                              (if font-lock-mode
;;                                nil
;;                                (font-lock-mode t))))
(put 'downcase-region 'disabled nil)


;; iswitchb
;; (iswitchb-default-keybindings)
;; keybindings
(add-hook 'iswitchb-define-mode-map-hook
          'iswitchb-my-keys)

(defun iswitchb-my-keys ()
  "Add my keybindings for iswitchb."
  (define-key iswitchb-mode-map [right] 'iswitchb-next-match)
  (define-key iswitchb-mode-map [left] 'iswitchb-prev-match)
  (define-key iswitchb-mode-map "\C-f" 'iswitchb-next-match)
  (define-key iswitchb-mode-map " " 'iswitchb-next-match)
  (define-key iswitchb-mode-map "\C-b" 'iswitchb-prev-match)
  )

;; iswitchb に候補がなければ find-file に
(defun iswitchb-possible-new-buffer (buf)
  "Possibly create and visit a new buffer called BUF."
  (interactive)
  (message (format
            "No buffer matching `%s', "
            buf))
  (sit-for 1)
  (call-interactively 'find-file buf))

(defun iswitchb-buffer (arg)
  "Switch to another buffer.

The buffer name is selected interactively by typing a substring.  The
buffer is displayed according to `iswitchb-default-method' -- the
default is to show it in the same window, unless it is already visible
in another frame.
For details of keybindings, do `\\[describe-function] iswitchb'."
  (interactive "P")
  (if arg
      (call-interactively 'switch-to-buffer)
    (setq iswitchb-method iswitchb-default-method)
    (iswitchb)))
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(rails-ws:default-server-type "webrick"))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )

;; yatex: Mac OS X 付属のPreview をプレビューとして用いる
(setq dvi2-command "open -a Preview")


;;; imaxima
;; デフォルトが png。他に jpeg が選べる。Meadow では tiff は ダメ。
(setq imaxima-image-type 'jpeg)


;; flymake が読みづらいので色を変える
(set-face-background 'flymake-errline "red4")
(set-face-background 'flymake-warnline "dark slate blue")

(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; erlang
;;; Erlang - basic erlang-mode
;;(setq erlang-root-dir "/opt/local/lib/erlang") ; この変数は設定しておく
;;(add-to-list 'load-path
;;     (concat erlang-root-dir "/lib/tools-2.6/emacs"))
;;(add-to-list 'exec-path
;;     (concat erlang-root-dir "/bin"))
;;(require 'erlang-start)

;;
;; ruby debugger
;;
(autoload 'rubydb "rubydb3x"
 "run rubydb on program file in buffer *gud-file*.
the directory containing file becomes the initial working directory
and source-file directory for your debugger." t)


