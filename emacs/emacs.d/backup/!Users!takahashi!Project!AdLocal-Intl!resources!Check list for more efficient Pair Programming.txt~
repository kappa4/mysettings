Pair Programming Check List


大部分の人はペアプログラミングに挑戦する前に何年もプログラムを作ってきました。チームのために、古い習慣から抜け出してください。今まで培ってき  [ ]
  た古い習慣を破るのは困難かもしれません。そして、自分勝手な人は、チームの能力を最大限引き出すことはできません。不安かもしれませんが、それ以上
  に楽しいことがあなたを待っています。

休憩をとる                                                                   [ ]
      ペアプログラミングではお互い持続的に集中して作業を続けるので、とても密度が濃く、精神的に疲れます。休憩中は目前の作業から気分を切り離してください。先送りにしてきたこと、メールのチェック、電話への折り返しの返事、などを
      すべて行なえます。
    1 定期的に休憩をとっていますか?                                                     [ ]

Take a Rest
  1. Are you taking periodic rest?

謙虚になる                                                                   [ ]
      全員がチームのメンバーです。成功も失敗もチーム単位で形成されるのです。
    1 「色々な実装方針がある」という認識がありますか？(自分のやり方に従わないのなら、出ていけ」といった態度になっていませんか?)      [ ]
    2 自分の考えに対する批判を傷つく事なく受け入れられてますか？(自分の考えに対する批判を不信のサインだと勘違いしていませんか?)      [ ]

Be Humble
  2. Do you have understanding there are a lot of way to implements?
  3. Are you able to entertain without be hurt for critisithm for your ideas.

自信を持つ/受容性を持つ                                                            [ ]
      自分のプログラミングスキルに自信が無い、不安に思う場合も気に病む必要はありません。
    1 自分がすごいと思ってる人は、思っているより何でも知っているわけではないことを認識していますか?                     [ ]
    2 ナビゲーターをしているとき、ドライバーがミスを修正する時間を与えていますか?                              [ ]
          修正するタイミングは開発者によりまちまちです。ドライバーをよく観察し、相手に合わせてください。
コミュニケーションをとる                                                            [ ]
      ペアプログラミングでは、15秒の沈黙ですら長すぎます。
    1 ドライバーをしているときに進行中の作業についてこれから何をするのか、いま何をしているのかについて話してますか?             [ ]
    2 パートナーが何をしているのか理解できない場合、中断して尋ねてますか?                                  [ ]
          それでも理解できない場合、もう一度尋ねてください。
    3 パートナーの考えと論点を声に出して、言い換えたり、まとめたりしていますか?                               [ ]
          パートナーには共感的になってください。
耳を傾ける                                                                   [ ]
    1 パートナーの言うことに耳を傾けていますか?                                               [ ]
          自分はパートナーの話していることを知っている、行っている作業を理解していると思いこんで、口を挟んだりしないでください。
    2 ナビゲーターから質問を受けたときに、自分のやっていることや考えを明確に答えていますか?                         [ ]
          「私を信頼して。うまくいくから」は受け入れられる答えではありません。
チームのメンバになる                                                              [ ]
    1 パートナーの仕事は自分の仕事であることを認識していますか?                                       [ ]
          ペアプログラミングは、お互いに100%の責任を持つ共同作業です。「君の設計にバグがあるよ」「そのバグは、君の分担部分が原因だ」などと言ったり、考えたりすることは許されません。
    2 ナビゲーターをしているとき、いつでもドライバーを引き受けられるという自信をもっていますか?                       [ ]
          そのように感じない場合、何が起きているのかを理解するためにドライバーになりたいと頼んでください
    3 ナビゲーターとドライバーは頻繁に入れ替わっていますか？                                         [ ]
    4 ナビゲーターをしているパートナーが疲れてきた場合、キーボードを渡していますか?                             [ ]
    5 ドライバーをしている自分が疲れてきた時はキーボードを渡していますか?                                  [ ]
    6 ドライバーをしているパートナーが疲れていたら、キーボードを取り上げていますか?                             [ ]
    7 二人とも疲れている場合は、散歩する・休憩をとるなどして無限ループを阻止していますか?                          [ ]
    8 パートナー同士で設計、方向性、技法についての対立は起きていますか?                                   [ ]
          対立が起きていなければ、ペアは別の形で機能障害を起こしています。
    9 対立が起きた際の処理の方法をうまく行えていますか?                                           [ ]
          参考資料にまとめてあります。
今やることに集中する                                                              [ ]
    1 議論をすることは本当に重要な問題だけにしていますか?                                          [ ]
          問題1つ1つに論争を起こすペアは、進行を妨げます。ペアプログラミングの主な目的は、設計がどこからきたのか、誰が設計したのかに関係なく、できる限り最高の設計に向けて仕事をすることです。パートナーがdo-whil
          eを使いたがっているが、forの方が良いと思う場合、主張や論争を行う前に、この場合では本当に重要なことなのか考えてください。
    2 今実装すべき機能の議論をしていますか？                                                 [ ]
          実装しようとしている機能から派生した課題が出てきた場合、そちらの議論に夢中になり、今やるべきことを脇に押しやっていませんか？一度に実装する機能は小さくすべきです。新たに気づいた課題は、TODOリスト等に押しや
          って、実装すべき機能に集中してください。
その他                                                                     [ ]
    1 コーディング規約に沿ってプログラムを作っていますか?                                          [ ]
    2 テストファーストで開発をしていますか?                                                 [ ]
参考資料                                                                    [ ]
    パートナー間の対立を処理する4つの方法                                                 [ ]
        I ナビゲーターが、ドライバーを悩ませている議論を呼ぶ問題を記録し、定期的に問題をレビューしましょう。               [ ]
        II 一定の時間、例えば10分間くらい離れて作業する。その間に、ソロプログラミング、プロトタイプ作成、紙と鉛筆での設計を行いましょ  [ ]
          う。その時間のあとそれぞれ調べたことを議論するためにペアに戻ってください。
        III Wayne Conrad                                                    [ ]
          の方法：「5分間だけ作業させてくれ。君が見て気に入ったら、仕上げまで作業していいよ。気に入らなければ、元に戻って、別の方向で
          進もう」と言います。その際パートナーにタイマを渡すことが大切です。自分の考えを最後まで貫き、パートナーの決定権を奪おうとして
          いるわけではないことを明確にしましょう。
        IV 自分たちだけで解決できないパートナー間の問題は、リーダー/マネージャーに解決してもらいましょう。                [ ]
